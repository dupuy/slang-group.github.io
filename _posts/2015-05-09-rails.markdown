---
layout: api
title:  Rails
date:   2015-05-09 20:29:10
categories: servers
---

Rails has an internationalization system built into it.

Your best source is [the official docs](http://guides.rubyonrails.org/i18n.html),
but we describe it here, too.

### The View

You should have some text in your view, whether it's HAML or ERB or another format.

<code>
%p Hello world
</code>

In your view, use the ```I18n.t``` method (short for I18n.translate) to mark phrases
or keys which should be translated:

<code>
%p= I18n.t(:hello_world)
</code>

### The Config Files

Rails is looking up your keys in ```config/locales/en.yml```

You can make a simple English YAML file for the "hello world" translation like this:

<code>
en:<br/>
&nbsp;&nbsp;hello_world: "Hello world"<br/>
&nbsp;&nbsp;good_bye: "good bye"
</code>

You can make another language file, such as ```config/locales/es.yml```, looking like this:

<code>
es:<br/>
&nbsp;&nbsp;hello_world: "Hola mundo"<br/>
&nbsp;&nbsp;good_bye: "adios"
</code>

The application will use the value in the English form, unless you set another default language:

<code>
I18n.default_locale = :es
</code>

**Interpolation**

For a customized greeting such as "Your name is -Nick-" your first instinct might be to write this code:

<code>
greeting = I18n.t(:your_name_is) + user.name   # not good
</code>

<code>
en:<br/>
&nbsp;&nbsp;your_name_is: 'Your name is '
</code>

In many languages, the order of the subject, verb, and object in a sentence is different from the order in English.
To translate phrases and sentences, it's better for you to pass the original phrase and the value
to I18n:

<code>
greeting = I18n.t(:your_name_is, name: user.name)
</code>

<code>
en:<br/>
&nbsp;&nbsp;your_name_is: "Your name is %{name}"
</code.

In other languages, such as Japanese, the order can be different.

<code>
ja:<br/>
&nbsp;&nbsp;your_name_is: "なまえが%{name}です。"
</code>

**Plurals**

[In many languages](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html),
plurals work differently from English. For example, we would say "there are zero apples" but other
languages may use the singular "apple" for zero, or may have different plurals for two or one hundred.

<code>
how_many_apples = I18n.t(:apple_count, number: apples.length)
</code>

<code>
en:<br/>
&nbsp;&nbsp;apple_count:
&nbsp;&nbsp;&nbsp;&nbsp;zero: "You have no apples."
&nbsp;&nbsp;&nbsp;&nbsp;one: "You have one apple."
&nbsp;&nbsp;&nbsp;&nbsp;other: "You have #{count} apples."
</code>

For languages where Rails does not handle pluralization well, you can [create custom rules](http://stackoverflow.com/questions/6166064/i18n-pluralization) in a file named
```config/initializers/pluralization.rb``` or ```config/locales/plurals.rb```.

### The Controller

To set the language, you can review the Rails reference for using URL parameters,
subdomains, and other hints to set the language.
